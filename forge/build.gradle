plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'net.darkhax.curseforgegradle' version '1.+'
}

version = "${mod_version}"
group = "top.theillusivec4.caelus"

base {
    archivesName = "caelus-forge"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "${parchment_mc_version}-${parchment_version}-${mc_version}"

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=caelus.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                caelus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "-mixin.config=caelus.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                caelus {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "caelus.refmap.json"
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        mc_version_range: mc_version_range, forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version: loader_version, version: version,
]
processResources {
    from("CHANGELOG.md")
    from("../LICENSE")
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

sourceSets {
    main {
        resources {
            srcDirs += '../docs'
        }
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : "Caelus API",
                    "Specification-Vendor"    : "C4",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : "Caelus API",
                    "Implementation-Version"  : "${getArchiveVersion()}",
                    "Implementation-Vendor"   : "C4",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs"            : "caelus.mixins.json"])
    }
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    include 'top/theillusivec4/caelus/api/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

artifacts {
    archives apiJar
    archives sourcesJar
}

jar.finalizedBy('reobfJar')

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = findProperty('curseKey')
    def projectId = "${curse_id}".toString()
    def mainFile = upload(projectId, jar)
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('CHANGELOG_LATEST.md')
    mainFile.releaseType = "${release_type}"
    "${release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.withAdditionalFile(sourcesJar)
    mainFile.withAdditionalFile(apiJar)
}

modrinth {
    token = findProperty('modrinthKey') ?: 0
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('CHANGELOG_LATEST.md').text
    uploadFile = jar
    additionalFiles = [sourcesJar, apiJar]
    gameVersions = "${release_versions}".split(",") as List<String>
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {

        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName

            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }

    repositories {

        if (project.hasProperty('urlMaven')) {

            if (project.hasProperty('userMaven') && project.hasProperty('passMaven')) {

                maven {
                    url urlMaven
                    credentials {
                        username userMaven
                        password passMaven
                    }
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
