buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven {
            url = "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: '1.4.0'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
        classpath group: 'com.modrinth.minotaur', name: 'Minotaur', version: '2.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.modrinth.minotaur'

version = "${mod_version}"
group = "top.theillusivec4.caelus"
archivesBaseName = "caelus-forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.20'

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=caelus.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                caelus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "-mixin.config=caelus.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                caelus {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "caelus.refmap.json"
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }

    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': version, 'mc_version_range': mc_version_range, 'forge_version_range': forge_version_range, "loader_version": loader_version
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    from("CHANGELOG.md")
    from("../LICENSE")
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

sourceSets {
    main {
        resources {
            srcDirs += '../docs'
        }
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : "Caelus API",
                    "Specification-Vendor"    : "C4",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : "Caelus API",
                    "Implementation-Version"  : "${getArchiveVersion()}",
                    "Implementation-Vendor"   : "C4",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs"            : "caelus.mixins.json"])
    }
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    include 'top/theillusivec4/caelus/api/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

artifacts {
	archives apiJar
    archives sourcesJar
}

jar.finalizedBy('reobfJar')

tasks.build.dependsOn apiJar, sourcesJar

curseforge {
    apiKey = findProperty('curseKey') ?: 0

    project {
        id = "${curse_id}"
        releaseType = "${release_type}"
        changelogType = 'markdown'
        changelog = file('CHANGELOG_LATEST.md')
        addArtifact(sourcesJar)
        addArtifact(apiJar)
        "${release_versions}".split(',').each {
            addGameVersion "${it}"
        }
    }
}

modrinth {
    token = findProperty('modrinthKey') ?: '0'
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('CHANGELOG_LATEST.md').text
    uploadFile = jar
    additionalFiles = [sourcesJar, apiJar]
    gameVersions = "${release_versions}".split(",") as List<String>
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {

        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName

            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }

    repositories {

        if (project.hasProperty('urlMaven')) {

            if (project.hasProperty('userMaven') && project.hasProperty('passMaven')) {

                maven {
                    url urlMaven
                    credentials {
                        username userMaven
                        password passMaven
                    }
                }
            }
        }
    }
}
